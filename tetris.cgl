my score[0]; # awkward hack to make the display look nicer
my preview[4];
my board[23];
my input;

my randval;
my rand = 1;
my shifted;

my x0;  # current piece location
my x1;
my x2;
my x3;
my y0;
my y1;
my y2;
my y3;
my xt0;  # transposed piece location
my xt1;
my xt2;
my xt3;
my yt0;
my yt1;
my yt2;
my yt3;
my px0;  # preview piece location
my px1;
my px2;
my px3;
my py0;
my py1;
my py2;
my py3;

my collision;
my piecescore;

my i;
my j;
my k;

# new game
score = 0;
score[0] = 65535;
preview[0] = 63519;
preview[1] = 63519;
preview[2] = 63519;
preview[3] = 63519;
preview[4] = 65535;
do clear board {
  board[j] = 57351;
  j++;
} while (j < 22);
board[22] = 65535;

call newpreview();
xt0 = px0;
xt1 = px1;
xt2 = px2;
xt3 = px3;
yt0 = py0;
yt1 = py1;
yt2 = py2;
yt3 = py3;

do play game {
  preview[1] = 63519;
  preview[2] = 63519;
  
  call newpreview();
  
  do single piece {
    x0 = xt0;
    y0 = yt0;
    x1 = xt1;
    y1 = yt1;
    x2 = xt2;
    y2 = yt2;
    x3 = xt3;
    y3 = yt3;
    shifted = 1 << x0;
    board[y0] |= shifted;
    shifted = 1 << x1;
    board[y1] |= shifted;
    shifted = 1 << x2;
    board[y2] |= shifted;
    shifted = 1 << x3;
    board[y3] |= shifted;
    input = display;
    display = 0;
    if (input == 1) rotate counterclockwise {
      xt0 = y1 - y0;
      xt0 += x1;
      yt0 = x0 - x1;
      yt0 += y1;
      xt1 = x1;
      yt1 = y1;
      xt2 = y1 - y2;
      xt2 += x1;
      yt2 = x2 - x1;
      yt2 += y1;
      xt3 = y1 - y3;
      xt3 += x1;
      yt3 = x3 - x1;
      yt3 += y1;
    }
    if (input == 2) move left {
      xt0 = x0 + 1;
      xt1 = x1 + 1;
      xt2 = x2 + 1;
      xt3 = x3 + 1;
    }
    if (input == 4) soft drop {
      yt0 = y0 + 1;
      yt1 = y1 + 1;
      yt2 = y2 + 1;
      yt3 = y3 + 1;
    }
    if (input == 8) move right {
      xt0 = x0 - 1;
      xt1 = x1 - 1;
      xt2 = x2 - 1;
      xt3 = x3 - 1;
    }
    if (input == 16) rotate clockwise {
      xt0 = y0 - y1;
      xt0 += x1;
      yt0 = x1 - x0;
      yt0 += y1;
      xt1 = x1;
      yt1 = y1;
      xt2 = y2 - y1;
      xt2 += x1;
      yt2 = x1 - x2;
      yt2 += y1;
      xt3 = y3 - y1;
      xt3 += x1;
      yt3 = x1 - x3;
      yt3 += y1;
    }
    rand ^= input; # inject randomness
    if (rand == 0) {
      rand = input; # prevent prng bug
    }
  
    shifted = 1 << x0;
    board[y0] &!= shifted;
    shifted = 1 << x1;
    board[y1] &!= shifted;
    shifted = 1 << x2;
    board[y2] &!= shifted;
    shifted = 1 << x3;
    board[y3] &!= shifted;
    
    collision = board[yt0] >>> xt0;
    shifted = board[yt1] >>> xt1;
    collision |= shifted;
    shifted = board[yt2] >>> xt2;
    collision |= shifted;
    shifted = board[yt3] >>> xt3;
    collision |= shifted;
    collision &= 1;
  
    if (collision == 0) valid move {
      x0 = xt0;
      y0 = yt0;
      x1 = xt1;
      y1 = yt1;
      x2 = xt2;
      y2 = yt2;
      x3 = xt3;
      y3 = yt3;
    } else invalid move {
      xt0 = x0;
      yt0 = y0;
      xt1 = x1;
      yt1 = y1;
      xt2 = x2;
      yt2 = y2;
      xt3 = x3;
      yt3 = y3;
    }
    
    shifted = 1 << x0;
    board[y0] |= shifted;
    shifted = 1 << x1;
    board[y1] |= shifted;
    shifted = 1 << x2;
    board[y2] |= shifted;
    shifted = 1 << x3;
    board[y3] |= shifted;
    
    yt0 = y0 + 1;
    yt1 = y1 + 1;
    yt2 = y2 + 1;
    yt3 = y3 + 1;
    
    shifted = 1 << x0;
    board[y0] &!= shifted;
    shifted = 1 << x1;
    board[y1] &!= shifted;
    shifted = 1 << x2;
    board[y2] &!= shifted;
    shifted = 1 << x3;
    board[y3] &!= shifted;
    
    collision = board[yt0] >>> xt0;
    shifted = board[yt1] >>> xt1;
    collision |= shifted;
    shifted = board[yt2] >>> xt2;
    collision |= shifted;
    shifted = board[yt3] >>> xt3;
    collision |= shifted;
    collision &= 1;
    
  } while (collision < 1);
  call printfallingpiece();
  
  piecescore = 1;
  i = 21;
  do check for clears {
    if (board[i] == -1) clear row {
      j = i;
      i++;
      piecescore <<= 1;
      do gravity {
        k = j - 1;
        board[j] = board[k];
        j--;
      } while (j > 0);
      board[0] = 57351;
    }
    i--;
  } while (i > 0);
  piecescore >>>= 1;
  score += piecescore;
  
  xt0 = px0;
  xt1 = px1;
  xt2 = px2;
  xt3 = px3;
  yt0 = py0;
  yt1 = py1;
  yt2 = py2;
  yt3 = py3;
  
  collision = board[yt0] >>> xt0;
  shifted = board[yt1] >>> xt1;
  collision |= shifted;
  shifted = board[yt2] >>> xt2;
  collision |= shifted;
  shifted = board[yt3] >>> xt3;
  collision |= shifted;
  collision &= 1;
  
} while (collision < 1);

sub newpreview() {
  do prng {
    shifted = rand << 1;
    rand ^= shifted;
    shifted = rand >>> 5;
    rand ^= shifted;
    shifted = rand << 2;
    rand ^= shifted;
    randval = rand & 7;
  } while (randval < 1);
  if (randval == 1) Z tetromino {
    px0 = 6;
    px1 = 7;
    px2 = 7;
    px3 = 8;
    py0 = 2;
    py1 = 2;
    py2 = 1;
    py3 = 1;
  }
  if (randval == 2) S tetromino {
    px0 = 6;
    px1 = 7;
    px2 = 7;
    px3 = 8;
    py0 = 1;
    py1 = 2;
    py2 = 1;
    py3 = 2;
  }
  if (randval == 3) O tetromino{
    px0 = 7;
    px1 = 8;
    px2 = 7;
    px3 = 8;
    py0 = 1;
    py1 = 1;
    py2 = 2;
    py3 = 2;
  }
  if (randval == 4) I tetromino {
    px0 = 6;
    px1 = 7;
    px2 = 8;
    px3 = 9;
    py0 = 1;
    py1 = 1;
    py2 = 1;
    py3 = 1;
  }
  if (randval == 5) L tetromino {
    px0 = 6;
    px1 = 7;
    px2 = 8;
    px3 = 8;
    py0 = 1;
    py1 = 1;
    py2 = 1;
    py3 = 2;
  }
  if (randval == 6) J tetromino {
    px0 = 8;
    px1 = 7;
    px2 = 6;
    px3 = 6;
    py0 = 1;
    py1 = 1;
    py2 = 1;
    py3 = 2;
  }
  if (randval == 7) T tetromino {
    px0 = 6;
    px1 = 7;
    px2 = 7;
    px3 = 8;
    py0 = 1;
    py1 = 1;
    py2 = 2;
    py3 = 1;
  }
  shifted = 1 << px0;
  preview[py0] |= shifted;
  shifted = 1 << px1;
  preview[py1] |= shifted;
  shifted = 1 << px2;
  preview[py2] |= shifted;
  shifted = 1 << px3;
  preview[py3] |= shifted;
}
